DECLARE ib NAMESPACE 'http://ib.novy.com';

CREATE COMPUTE MODULE PROCESSING_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		DECLARE inBody REFERENCE TO InputRoot.XMLNSC.ib:cardTransactRs;
		DECLARE CLIENT_ID INTEGER inBody.ib:clientId;
		DECLARE GUID CHARACTER inBody.ib:guid;
		DECLARE AMOUNT INTEGER inBody.ib:amount;
		DECLARE respQueue CHARACTER inBody.ib:respQueue;
		SET OutputRoot.MQMD.Format = 'MQRFH2';
		SET OutputRoot.MQRFH2.usr.(MQRFH2.Field)respQueue = respQueue;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = respQueue;
		SET OutputRoot.XMLNSC.ib:PROCESSING_RS.ib:GUID = GUID;
		DECLARE outBody REFERENCE TO OutputRoot.XMLNSC.ib:PROCESSING_RS;
		SET outBody.ib:CLIENT_ID = CLIENT_ID;
		SET outBody.ib:AMOUNT = AMOUNT;
		IF MOD(AMOUNT, 100) = 0 THEN
			SET outBody.ib:STATUS = 'OK';			
		ELSE
			SET outBody.ib:STATUS = 'ERROR';
			SET outBody.ib:CODE = '789';
			SET outBody.ib:DESCR = 'Amount must be multiple of 100';
		END IF;
		
		IF MOD(CLIENT_ID, 10) = 0 THEN
			RETURN FALSE;
		ELSEIF MOD(CLIENT_ID, 2) = 0 THEN
			DECLARE delay INTERVAL;
			SET delay = INTERVAL '15' SECOND;
			DECLARE start TIME;
        	SET start = CURRENT_TIME + delay;
			SET OutputLocalEnvironment.TimeoutRequest.Action = 'SET'; 
			SET OutputLocalEnvironment.TimeoutRequest.Identifier = 	GUID;
			SET OutputLocalEnvironment.TimeoutRequest.Count=1;
			SET OutputLocalEnvironment.TimeoutRequest.StartDate = 'TODAY';
			SET OutputLocalEnvironment.TimeoutRequest.StartTime = start;
			PROPAGATE TO TERMINAL 'out2';
		ELSE			
			PROPAGATE TO TERMINAL 'out';
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
