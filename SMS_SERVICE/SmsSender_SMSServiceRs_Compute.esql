

CREATE COMPUTE MODULE SmsSender_SMSServiceRs_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		DECLARE STATUS CHARACTER InputRoot.XMLNSC.tns:SendSMSBatchResponse.tns:Status;
		DECLARE GUID CHARACTER;
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(SMSTree_shared.*[]);
		IF STATUS = 'OK' THEN
			WHILE I <= J DO
				SET GUID = SMSTree_shared.*[I].guid;
				UPDATE Database.SMSLIST  AS BS SET STATUS = 'DONE' WHERE BS.GUID = GUID;
				UPDATE Database.REQUEST_STATUS  AS BS SET ALERT_STATUS = 'DONE' WHERE BS.GUID = GUID;
				SET I = I + 1;	
			END WHILE;
			RETURN FALSE;
		ELSEIF STATUS = 'Error' OR STATUS = 'ERROR' THEN
			WHILE I <= J DO
				SET GUID = SMSTree_shared.*[I].guid;
				UPDATE Database.SMSLIST  AS BS SET STATUS = 'NOT DELIVERED' WHERE BS.GUID = GUID;
				UPDATE Database.REQUEST_STATUS  AS BS SET ALERT_STATUS = 'ERROR' WHERE BS.GUID = GUID;
				SET I = I + 1;	
			END WHILE;
			CALL CopyMessageHeaders();
			SET OutputRoot.MQMD = InputRoot.MQMD;
			SET OutputRoot.MQMD.Format = 'MQHRF2';
			SET OutputRoot.MQRFH2.usr.(MQRFH2.Field)errorDesc = InputRoot.XMLNSC.*.*:ErrorDescription;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'TRANSFER.ТЕXT.ERROR';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
